input {
   file {
      path => "/input/20151218-cameacs01-172.17.254.211.log"
      start_position => "beginning"
      tags => "cisco_acs"
   }
}

filter {
   if ("cisco_acs" in [tags]) {
      # Match only messages from Cisco ACS. Capture the header & message ignoring
      # the sequence numbers, and tag it. The clue is the "CSCOacs_*" string

      grok {
          match => [ "message","(?<acs_header>CSCOacs_%{DATA}) %{NONNEGINT:acs_messageid} %{POSINT} %{NONNEGINT} %{GREEDYDATA:acs_message}" ]
         }

      # Multiline filter only acts on message so copy the captured message in
      mutate {
         replace => [ "message", "%{acs_message}" ]
      }
      
      # Any message not beginning with a datestamp should be joined to the previous line
      multiline {
         pattern => "^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}"
         negate => true
         what => "previous"
      }

      # The captured message fields are now an array so squash it
      # Multiline filter joins lines together with \n's so once again replace
      # message with the header and the joined message which doesn't have \n's
      # Remove any fields or tags we added so the message should look normal again      
      mutate {
         join => [ "acs_message", "" ]
         replace => [ "message", "%{acs_header} %{acs_message}" ]
         remove_field => [ "acs_header", "acs_message" ]
         remove_tag => [ "multiline" ]
      }
               
      grok {
         match => [ "message","CSCOacs_%{DATA:acs_type}%{SPACE}%{TIMESTAMP_ISO8601:syslog_timestamp} %{ISO8601_TIMEZONE:syslog_timezone} %{INT} %{INT} %{WORD:syslog_level} %{GREEDYDATA:syslog_message}" ]
      }
      
      if !("_grokparsefailure" in [tags]) {
         date {
            match => [ "syslog_timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
            timezone => "UTC"
         }
         
         mutate {
            replace => [ "message", "%{syslog_message}" ]
            remove_field => [ "syslog_message" ]
         }
        
         kv {
            source => "message"
            field_split => ","
            prefix => "acs_"
            trim => "\[\]"
            trimkey => "\s"
         }
                       
                       
                       
                       
                #Attempt to fix the host name  
#        if "Default" not in [acs_NetworkDeviceName] and "Azure" not in [acs_NetworkDeviceName] and "-" in [acs_NetworkDeviceName]  {
#                  mutate{
#                        replace => [ "host", "%{acs_NetworkDeviceName}" ]                            
#                  }
#            } else if [acs_DeviceIPAddress] {
#                  mutate {
#                        replace => [ "host", "%{acs_DeviceIPAddress}" ]
#                  }
#                                    translate {
#                                                field => "acs_DeviceIPAddress"
#                                                destination => "host"
#                                                override => true
#                                                dictionary_path => "C:/logstash/iptoname.txt"
#                                        }
#                       
#                        } else {
#                  #mutate {
#                  #      replace => [ "host", "%{syslog_host}" ]
#                  #}
#            }
#                       
#         if [acs_type] == "Passed_Authentications" {          
#            mutate {
#               add_field => [ "new_msg", "%{acs_type} User: %{acs_UserName} Protocol: %{acs_Protocol} Rule: %{acs_AuthorizationPolicyMatchedRule}" ]
#            }
#            
#            mutate {
#                  replace => [ "message", "%{new_msg}" ]
#                  remove_field => [ "new_msg" ]
#            }
#         } else if [acs_type] == "Failed_Attempts" {
#            mutate {
#               add_field => [ "acs_User", "%{acs_UserName}" ]
#            }
#            
#            mutate {
#               add_field => [ "new_msg", "%{acs_type} User: %{acs_UserName} Protocol: %{acs_Protocol}" ]
#            }
#            
#            mutate {
#               replace => [ "message", "%{new_msg}" ]
#               remove_field => [ "new_msg" ]
#            }           
#         } else if [acs_type] == "TACACS_Accounting" {
#            kv {
#               source => "acs_CmdSet"
#            }
#         } # end if
      } # end if
   } # end if
} # end filter



output {
   stdout {
      codec => "rubydebug"
   }
}

